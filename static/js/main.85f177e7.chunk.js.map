{"version":3,"sources":["pages/Home.js","FiveDayForm.js","DayCard.js","pages/FiveDayForecast.js","Form.js","Weather.js","pages/CurrentWeather.js","App.js","serviceWorker.js","index.js"],"names":["Home","style","color","padding","fontSize","FiveDayForm","props","className","onSubmit","fetchFiveDayForecast","onChange","handleCityInput","value","city","id","type","name","placeholder","handleCountryInput","country","moment","require","DayCard","newDate","Date","weekday","reading","dt","setTime","format","cityName","main","temp","toFixed","src","weather","icon","alt","feels_like","description","apiKey","FiveDayForecast","useState","setFullData","dailyData","setDailyData","setCity","setCityName","setCountry","weatherURL","e","a","preventDefault","fetch","then","res","json","data","list","filter","dt_txt","includes","currentTarget","map","index","key","Form","fetchCurrentWeatherData","Weather","date","fontWeight","minTemp","maxTemp","temperature","feelsLikeTemp","wind","clouds","humidity","error","CurrentWeather","setWeather","response","ok","sys","temp_min","temp_max","all","speed","Error","console","warn","App","to","path","basename","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sZAYeA,MAVf,WAEI,OACI,6BACI,wDACA,wBAAIC,MAAO,CAAEC,MAAO,mBAAoBC,QAAS,OAAQC,SAAU,SAAnE,mD,2CCoBGC,MAxBf,SAAqBC,GACjB,OACI,0BAAMC,UAAU,OAAOC,SAAUF,EAAMG,sBACnC,2BACIC,SAAUJ,EAAMK,gBAChBC,MAAON,EAAMO,KACbC,GAAG,OACHC,KAAK,OACLC,KAAK,OACLC,YAAY,SAEhB,2BACIP,SAAUJ,EAAMY,mBAChBN,MAAON,EAAMa,QACbL,GAAG,UACHC,KAAK,OACLC,KAAK,UACLC,YAAY,YAEhB,4BAAQV,UAAU,iBAAlB,iBCnBNa,G,MAASC,EAAQ,KAuBRC,MArBf,SAAiBhB,GAEb,IAAIiB,EAAU,IAAIC,KACZC,EAA6B,IAAnBnB,EAAMoB,QAAQC,GAG9B,OAFAJ,EAAQK,QAAQH,GAGZ,yBAAKlB,UAAU,eACX,4BAAKa,EAAOG,GAASM,OAAhB,QACL,2BAAIT,EAAOG,GAASM,OAAhB,gBACJ,2BAAG,gCAASvB,EAAMwB,UAAlB,KACA,uBAAG7B,MAAO,CAAEG,SAAU,SAAU,gCAASE,EAAMoB,QAAQK,KAAKC,KAAKC,QAAQ,GAAG,kCAA5C,KAAhC,KACA,yBAAK1B,UAAU,OAAO2B,IAAG,2CAAsC5B,EAAMoB,QAAQS,QAAQ,GAAGC,KAA/D,WAA8EC,IAAI,iBAE3G,2BAAG,+CAAoB,8BAAvB,IAAwC/B,EAAMoB,QAAQK,KAAKO,WAAWL,QAAQ,GAAG,kCAAjF,KACA,2BAAG,gCAAS3B,EAAMoB,QAAQS,QAAQ,GAAGI,gBCf3CC,EAAS,mCA4DAC,MAzDf,WAA4B,IAAD,EACOC,mBAAS,IADhB,mBACRC,GADQ,aAEWD,mBAAS,IAFpB,mBAEhBE,EAFgB,KAELC,EAFK,OAGDH,mBAAS,IAHR,mBAGlB7B,EAHkB,KAGZiC,EAHY,OAIOJ,mBAAS,IAJhB,mBAIlBZ,EAJkB,KAIRiB,EAJQ,OAKKL,mBAAS,IALd,mBAKlBvB,EALkB,KAKT6B,EALS,KAMjBC,EAAU,4DAAwDpC,EAAxD,YAAgEM,EAAhE,yCAAwGqB,GAElH/B,EAAoB,uCAAG,WAAMyC,GAAN,SAAAC,EAAA,yDACzBD,EAAEE,iBAEU,KAATvC,GAA2B,KAAZM,EAHO,gCAIHkC,MAAMJ,GACvBK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAMb,EAAYa,EAAKC,KAAKC,QAAO,SAAAjC,GAAO,OAAIA,EAAQkC,OAAOC,SAAS,eACtEd,EAAYU,EAAK5C,KAAKG,MACtB2B,EAAYc,GACZZ,EAAaD,MAVI,cAYrBE,EAAQjC,EAAO,IACfmC,EAAW7B,EAAU,IAbA,2CAAH,sDA6B1B,OACI,yBAAKZ,UAAU,4BACX,8CAEA,kBAAC,EAAD,CACIE,qBAAsBA,EACtBE,gBAlBZ,SAAyBuC,GACrBJ,EAAQI,EAAEY,cAAclD,QAkBhBM,mBAfZ,SAA4BgC,GACxBF,EAAWE,EAAEY,cAAclD,QAenBC,KAAMA,EACNM,QAASA,IAGb,yBAAKZ,UAAU,kBAfZqC,EAAUmB,KAAI,SAACrC,EAASsC,GAAV,OAAoB,kBAAC,EAAD,CAASlC,SAAUA,EAAUJ,QAASA,EAASuC,IAAKD,U,MCftFE,MAxBf,SAAc5D,GACV,OACI,0BAAMC,UAAU,OAAOC,SAAUF,EAAM6D,yBACnC,2BACIzD,SAAUJ,EAAMK,gBAChBC,MAAON,EAAMO,KACbC,GAAG,OACHC,KAAK,OACLC,KAAK,OACLC,YAAY,SAEhB,2BACIP,SAAUJ,EAAMY,mBAChBN,MAAON,EAAMa,QACbL,GAAG,UACHC,KAAK,OACLC,KAAK,UACLC,YAAY,YAEhB,4BAAQV,UAAU,iBAAlB,iBCnBNa,G,MAASC,EAAQ,KAmCR+C,MAjCf,SAAkB9D,GACd,IAAMiB,EAAU,IAAIC,KACd6C,EAAoB,IAAb/D,EAAM+D,KAGnB,OAFA9C,EAAQK,QAAQyC,GAGZ,yBAAK9D,UAAU,oBACX,yBAAKA,UAAU,cACVD,EAAM+D,MAAQ,2BAAIjD,EAAOG,GAASM,OAAhB,gBAClBvB,EAAM8B,MAAQ,yBAAK7B,UAAU,OAAO2B,IAAG,2CAAsC5B,EAAM8B,KAA5C,WAA2DC,IAAI,iBACtG/B,EAAMiC,aAAe,uBAAGtC,MAAO,CAAEqE,WAAY,WAAxB,IAAsChE,EAAMiC,aAClE,yBAAKhC,UAAU,yBACVD,EAAMiE,SAAW,uBAAGhE,UAAU,WAAWD,EAAMiE,QAAQ,kCAAtC,KACjBjE,EAAMkE,SAAW,uBAAGjE,UAAU,WAAWD,EAAMkE,QAAQ,kCAAtC,OAI1B,yBAAKjE,UAAU,eACVD,EAAMO,MAAQ,2BAAG,0CAAH,IAA4BP,EAAMO,MAChDP,EAAMa,SAAW,2BAAG,6CAA2Bb,EAAMa,SACrDb,EAAMmE,aAAe,2BAAG,iDAAH,IAAmCnE,EAAMmE,YAAY,kCAArD,KACrBnE,EAAMoE,eAAiB,2BAAG,gDAAH,IAAkCpE,EAAMoE,cAAc,kCAAtD,KAEvBpE,EAAMqE,MAAQ,2BAAG,0CAAH,IAA4BrE,EAAMqE,KAAlC,QACdrE,EAAMsE,QAAU,2BAAG,4CAAH,IAA8BtE,EAAMsE,OAApC,KAChBtE,EAAMuE,UAAY,2BAAG,8CAAH,IAAgCvE,EAAMuE,SAAtC,KAClBvE,EAAMwE,OAAS,2BAAG,2CAAH,IAA6BxE,EAAMwE,UC1B7DtC,G,MAAS,oCAmHAuC,MAjHf,WAA2B,IAAD,EACMrC,mBAAS,IADf,mBACjBP,EADiB,KACR6C,EADQ,OAEAtC,mBAAS,IAFT,mBAEjB7B,EAFiB,KAEXiC,EAFW,OAGMJ,mBAAS,IAHf,mBAGjBvB,EAHiB,KAGR6B,EAHQ,KAKhBmB,EAAuB,uCAAG,WAAMjB,GAAN,iBAAAC,EAAA,yDAC5BD,EAAEE,iBAD0B,SAIhB,KAATvC,GAA2B,KAAZM,EAJU,iCAKDkC,MAAM,oDAAD,OAAqDxC,EAArD,YAA6DM,EAA7D,+BAA2FqB,IAL/F,YAKlByC,EALkB,QAOZC,GAPY,iCAQLD,EAASzB,OARJ,OAQlBC,EARkB,OAUxBuB,EAAW,CACPvB,KAAMA,EACNY,KAAMZ,EAAK9B,GACXd,KAAM4C,EAAKzC,KACXG,QAASsC,EAAK0B,IAAIhE,QAClBsD,YAAahB,EAAK1B,KAAKC,KAAKC,QAAQ,GACpCyC,cAAejB,EAAK1B,KAAKO,WAAWL,QAAQ,GAC5CsC,QAASd,EAAK1B,KAAKqD,SAASnD,QAAQ,GACpCuC,QAASf,EAAK1B,KAAKsD,SAASpD,QAAQ,GACpCM,YAAakB,EAAKtB,QAAQ,GAAGI,YAC7BH,KAAMqB,EAAKtB,QAAQ,GAAGC,KACtBwC,OAAQnB,EAAKmB,OAAOU,IACpBX,KAAMlB,EAAKkB,KAAKY,MAChBV,SAAUpB,EAAK1B,KAAK8C,SACpBC,MAAO,KAEXhC,EAAQjC,EAAO,IACfmC,EAAW7B,EAAU,IA3BG,8BA8BlBqE,MAAM,YA9BY,gCAiCxBR,EAAW,CACXvB,KAAM,GACN5C,KAAM,GACNM,QAAS,GACTsD,YAAa,GACbC,cAAe,GACfH,QAAS,GACTC,QAAS,GACTjC,YAAa,GACbH,KAAM,GACNwC,OAAQ,GACRD,KAAM,GACNE,SAAU,GACVC,MAAO,kCA9CiB,0DAkDxBW,QAAQC,KAAR,MACAV,EAAW,CACPvB,KAAM,GACN5C,KAAM,GACNM,QAAS,GACTsD,YAAa,GACbC,cAAe,GACfH,QAAS,GACTC,QAAS,GACTjC,YAAa,GACbH,KAAM,GACNwC,OAAQ,GACRD,KAAM,GACNE,SAAU,GACVC,MAAO,gDAhEa,0DAAH,sDA6E7B,OACI,yBAAKvE,UAAU,kBACX,+CAEA,kBAAC,EAAD,CACI4D,wBAAyBA,EACzBxD,gBAdZ,SAAyBuC,GACrBJ,EAAQI,EAAEY,cAAclD,QAchBM,mBAXZ,SAA4BgC,GACxBF,EAAWE,EAAEY,cAAclD,QAWnBC,KAAMA,EACNM,QAASA,IAGb,kBAAC,EAAD,CACIiB,KAAMD,EAAQC,KACdiC,KAAMlC,EAAQkC,KACdxD,KAAMsB,EAAQtB,KACdM,QAASgB,EAAQhB,QACjBsD,YAAatC,EAAQsC,YACrBC,cAAevC,EAAQuC,cACvBH,QAASpC,EAAQoC,QACjBC,QAASrC,EAAQqC,QACjBjC,YAAaJ,EAAQI,YACrBqC,OAAQzC,EAAQyC,OAChBD,KAAMxC,EAAQwC,KACdE,SAAU1C,EAAQ0C,SAClBC,MAAO3C,EAAQ2C,UCpEhBa,MArCf,WACE,OACE,yBAAKpF,UAAU,OACb,kBAAC,IAAD,KACE,6BACE,yBAAKA,UAAU,UACb,4BACE,4BACE,kBAAC,IAAD,CAAMA,UAAU,OAAOqF,GAAG,KAA1B,SAEF,4BACE,kBAAC,IAAD,CAAMrF,UAAU,OAAOqF,GAAG,yBAA1B,oBAEF,4BACE,kBAAC,IAAD,CAAMrF,UAAU,OAAOqF,GAAG,0BAA1B,sBAMR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,yBAAyBC,SAAU,wBAC7C,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,yBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,IAAIE,OAAO,GACrB,kBAAC,EAAD,WCzBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,MAAK,SAAAsD,GACjCA,EAAaC,kB","file":"static/js/main.85f177e7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Home() {\r\n\r\n    return (\r\n        <div>\r\n            <h1>My Weather App for ComIT</h1>\r\n            <h1 style={{ color: 'rgb(242, 61, 48)', padding: '30px', fontSize: '70px' }}>Congratulations on completion of React course</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './FiveDayForm.css'\r\n\r\nfunction FiveDayForm(props) {\r\n    return (\r\n        <form className='form' onSubmit={props.fetchFiveDayForecast} >\r\n            <input\r\n                onChange={props.handleCityInput}\r\n                value={props.city}\r\n                id='city' \r\n                type=\"text\"\r\n                name=\"city\"\r\n                placeholder=\"City\"\r\n            />\r\n            <input\r\n                onChange={props.handleCountryInput}\r\n                value={props.country}\r\n                id='country'\r\n                type=\"text\"\r\n                name=\"country\"\r\n                placeholder=\"Country\"\r\n            />\r\n            <button className='getWeatherBtn'>Get Weather</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FiveDayForm;","import React from 'react';\r\nimport './DayCard.css';\r\n\r\nconst moment = require('moment');\r\n\r\nfunction DayCard(props) {\r\n    // console.log(props)\r\n    let newDate = new Date();\r\n    const weekday = props.reading.dt * 1000\r\n    newDate.setTime(weekday)\r\n\r\n    return (\r\n        <div className=\"weatherCard\">\r\n            <h3>{moment(newDate).format(`ddd`)}</h3>\r\n            <p>{moment(newDate).format(`MMM D, YYYY`)}</p>\r\n            <p><strong>{props.cityName}</strong> </p>\r\n            <p style={{ fontSize: '26px' }}><strong>{props.reading.main.temp.toFixed(1)}<sup>o</sup>C</strong> </p>\r\n            <img className='icon' src={`http://openweathermap.org/img/wn/${props.reading.weather[0].icon}@2x.png`} alt='Weather Icon'/>\r\n            \r\n            <p><strong>Feels like: <br /></strong> {props.reading.main.feels_like.toFixed(1)}<sup>o</sup>C</p>\r\n            <p><strong>{props.reading.weather[0].description}</strong></p>\r\n        </div>   \r\n        \r\n    );\r\n}\r\n\r\nexport default DayCard;","import React, { useState } from 'react';\r\nimport './FiveDayForecast.css'\r\n\r\nimport FiveDayForm from './../FiveDayForm';\r\nimport DayCard from './../DayCard';\r\nconst apiKey = '4fad5043f986c8cf84c29a4a3e7c3f49';\r\n\r\n\r\nfunction FiveDayForecast() {\r\n    let [fullData, setFullData] = useState([]);\r\n    const [dailyData, setDailyData] = useState([]);\r\n    let [city, setCity] = useState('');\r\n    let [cityName, setCityName] = useState('');\r\n    let [country, setCountry] = useState('');\r\n    const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&mode=json&units=metric&APPID=${apiKey}`;\r\n\r\n    const fetchFiveDayForecast = async(e) => {\r\n        e.preventDefault();\r\n\r\n        if(city !== '' && country !== '') {\r\n            const res = await fetch(weatherURL)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"15:00:00\"))\r\n                setCityName(data.city.name);\r\n                setFullData(data);\r\n                setDailyData(dailyData);\r\n            })\r\n            setCity(city = '');\r\n            setCountry(country = '');\r\n        } \r\n    } \r\n\r\n    function handleCityInput(e) {\r\n        setCity(e.currentTarget.value);\r\n    }\r\n\r\n    function handleCountryInput(e) {\r\n        setCountry(e.currentTarget.value);\r\n    }\r\n\r\n    function formatDayCards() {\r\n        return dailyData.map((reading, index) => <DayCard cityName={cityName} reading={reading} key={index} />)\r\n    }\r\n\r\n    return (\r\n        <div className='fiveDayForecastContainer'>\r\n            <h1>5-day Forecast</h1>\r\n            \r\n            <FiveDayForm\r\n                fetchFiveDayForecast={fetchFiveDayForecast}\r\n                handleCityInput={handleCityInput}\r\n                handleCountryInput={handleCountryInput}\r\n                city={city}\r\n                country={country}\r\n            />\r\n            \r\n            <div className='cardsContainer'>\r\n                {formatDayCards()}\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FiveDayForecast;","import React from 'react';\r\nimport './Form.css'\r\n\r\nfunction Form(props) {\r\n    return (\r\n        <form className='form' onSubmit={props.fetchCurrentWeatherData} >\r\n            <input\r\n                onChange={props.handleCityInput}\r\n                value={props.city}\r\n                id='city' \r\n                type=\"text\"\r\n                name=\"city\"\r\n                placeholder=\"City\"\r\n            />\r\n            <input\r\n                onChange={props.handleCountryInput}\r\n                value={props.country}\r\n                id='country'\r\n                type=\"text\"\r\n                name=\"country\"\r\n                placeholder=\"Country\"\r\n            />\r\n            <button className='getWeatherBtn'>Get Weather</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Weather.css';\r\n\r\nconst moment = require('moment');\r\n\r\nfunction Weather( props ) {\r\n    const newDate = new Date();\r\n    const date = props.date * 1000;\r\n    newDate.setTime(date)\r\n\r\n    return (\r\n        <div className='weatherContainer'>\r\n            <div className='weatherBox'>\r\n                {props.date && <p>{moment(newDate).format(`MMM D, YYYY`)}</p>}\r\n                {props.icon && <img className='icon' src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} alt='Weather Icon'/>}\r\n                {props.description && <p style={{ fontWeight: 'bolder' }}> {props.description}</p>}\r\n                <div className=\"weatherBoxTemperature\">\r\n                    {props.minTemp && <p className='minTemp'>{props.minTemp}<sup>o</sup>C</p>}\r\n                    {props.maxTemp && <p className='maxTemp'>{props.maxTemp}<sup>o</sup>C</p>}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"weatherData\">\r\n                {props.city && <p><strong>City: </strong> {props.city}</p>}\r\n                {props.country && <p><strong>Country: </strong>{props.country}</p>}\r\n                {props.temperature && <p><strong>Temperature: </strong> {props.temperature}<sup>o</sup>C</p>}\r\n                {props.feelsLikeTemp && <p><strong>Feels like: </strong> {props.feelsLikeTemp}<sup>o</sup>C</p>}\r\n                \r\n                {props.wind && <p><strong>Wind: </strong> {props.wind} m/s</p>}\r\n                {props.clouds && <p><strong>Clouds: </strong> {props.clouds}%</p>}\r\n                {props.humidity && <p><strong>Humidity: </strong> {props.humidity}%</p>}\r\n                {props.error && <p><strong>Error: </strong> {props.error}</p>}\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;","import React, { useState } from 'react';\r\n\r\nimport Form from './../Form';\r\nimport Weather from './../Weather';\r\nimport './CurrentWeather.css'\r\nconst apiKey = '4fad5043f986c8cf84c29a4a3e7c3f49';\r\n\r\nfunction CurrentWeather() {\r\n    let [weather, setWeather] = useState([]);\r\n    let [city, setCity] = useState('');\r\n    let [country, setCountry] = useState('');\r\n\r\n    const fetchCurrentWeatherData = async(e) => {\r\n        e.preventDefault();\r\n    \r\n        try {\r\n        if(city !== '' && country !== '') {\r\n            const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&APPID=${apiKey}`);\r\n\r\n            if(response.ok) {\r\n            const data = await response.json();\r\n            \r\n            setWeather({\r\n                data: data,\r\n                date: data.dt,\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                temperature: data.main.temp.toFixed(1),\r\n                feelsLikeTemp: data.main.feels_like.toFixed(1),\r\n                minTemp: data.main.temp_min.toFixed(1),\r\n                maxTemp: data.main.temp_max.toFixed(1),\r\n                description: data.weather[0].description,\r\n                icon: data.weather[0].icon, \r\n                clouds: data.clouds.all,\r\n                wind: data.wind.speed,\r\n                humidity: data.main.humidity,\r\n                error: ''\r\n            });\r\n            setCity(city = '');\r\n            setCountry(country = '');\r\n\r\n            } else {\r\n            throw Error(\"OOOpppps\");\r\n            }\r\n        } else {\r\n            setWeather({\r\n            data: '',\r\n            city: '',\r\n            country: '',\r\n            temperature: '',\r\n            feelsLikeTemp: '',\r\n            minTemp: '',\r\n            maxTemp: '',\r\n            description: '',\r\n            icon: '',\r\n            clouds: '',\r\n            wind: '',\r\n            humidity: '',\r\n            error: 'Please enter city and country'\r\n            });\r\n        }\r\n        } catch(err) {\r\n            console.warn(err);\r\n            setWeather({\r\n                data: '',\r\n                city: '',\r\n                country: '',\r\n                temperature: '',\r\n                feelsLikeTemp: '',\r\n                minTemp: '',\r\n                maxTemp: '',\r\n                description: '',\r\n                icon: '',\r\n                clouds: '',\r\n                wind: '',\r\n                humidity: '',\r\n                error: 'Looks like city or country does\\'t exist... '\r\n            });\r\n        }\t\r\n    }\r\n\r\n    function handleCityInput(e) {\r\n        setCity(e.currentTarget.value);\r\n    }\r\n\r\n    function handleCountryInput(e) {\r\n        setCountry(e.currentTarget.value);\r\n    }\r\n    \r\n    return (\r\n        <div className='currentWeather'>\r\n            <h1>Current Weather</h1>\r\n\r\n            <Form \r\n                fetchCurrentWeatherData={fetchCurrentWeatherData}\r\n                handleCityInput={handleCityInput}\r\n                handleCountryInput={handleCountryInput}\r\n                city={city}\r\n                country={country}\r\n            />\r\n            \r\n            <Weather\r\n                icon={weather.icon}\r\n                date={weather.date}\r\n                city={weather.city}\r\n                country={weather.country}\r\n                temperature={weather.temperature}\r\n                feelsLikeTemp={weather.feelsLikeTemp}\r\n                minTemp={weather.minTemp}\r\n                maxTemp={weather.maxTemp}\r\n                description={weather.description}\r\n                clouds={weather.clouds}\r\n                wind={weather.wind}\r\n                humidity={weather.humidity}\r\n                error={weather.error}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CurrentWeather;","import React from 'react';\r\nimport { BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom' \r\n\r\nimport './App.css';\r\n\r\nimport Home from './pages/Home'\r\nimport FiveDayForecast from './pages/FiveDayForecast';\r\nimport CurrentWeather from './pages/CurrentWeather'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router >\r\n        <div>\r\n          <nav className='navbar'>\r\n            <ul>\r\n              <li>\r\n                <Link className='link' to='/'>Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link className='link' to='/pages/currentweather'>Current Weather</Link>\r\n              </li>\r\n              <li>\r\n                <Link className='link' to='/pages/fivedayforecast'>5-Day Forecast</Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n     \r\n        </div>\r\n        <Switch>\r\n          <Route path='/pages/fivedayforecast' basename={'/comit-final-project'}>\r\n            <FiveDayForecast />\r\n          </Route>\r\n          <Route path='/pages/currentweather' >\r\n            <CurrentWeather />\r\n          </Route>\r\n          <Route path='/' exact={true}>\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}